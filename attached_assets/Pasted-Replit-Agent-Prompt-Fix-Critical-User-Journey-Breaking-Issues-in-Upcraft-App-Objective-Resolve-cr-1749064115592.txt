Replit Agent Prompt: Fix Critical User Journey Breaking Issues in Upcraft App
Objective: Resolve critical functional issues that are breaking the user journey experience in the Upcraft career development application, focusing on profile updates, data consistency, and navigation flow.

Critical Issues Identified:

1. Profile Update Database Constraint Error
Issue: Users cannot save profile changes due to email uniqueness constraint violations
Error: duplicate key value violates unique constraint "users_email_unique"
Impact: Blocks users from updating their profile information
2. Target Role Data Inconsistency
Issue: Career goal shows "Artificial Intelligence Engineer" but target role resolves to "Cloud Solutions Architect"
Impact: Confusing user experience with mismatched career data
3. Infinite Re-rendering and Data Fetching
Issue: Dashboard components are stuck in re-render loops
Impact: Performance degradation and poor user experience
4. Navigation Context Misalignment
Issue: User journey context not properly synchronized with career goals
Impact: Broken navigation flow between app sections
Required Fixes:

Priority 1: Fix Profile Update Functionality
Update Profile Update Logic - Modify the profile update endpoint to handle email uniqueness properly:

Only update email if it's actually changed
Add proper validation before database updates
Handle constraint violations gracefully
Improve Error Handling - Add user-friendly error messages for profile update failures

Priority 2: Fix Career Goal and Target Role Consistency
Resolve Target Role Mapping - Fix the mismatch between career goal titles and target role IDs:

Ensure career goal targetRoleId correctly maps to the intended role
Update role resolution logic to prevent mismatches
Synchronize Career Data - Ensure all career-related data stays consistent across components

Priority 3: Fix Performance and Re-rendering Issues
Optimize Dashboard Data Fetching - Prevent unnecessary API calls and re-renders:

Add proper dependency arrays to useEffect hooks
Implement proper loading states
Cache API responses where appropriate
Fix Context Dependencies - Resolve circular dependencies in React contexts

Priority 4: Improve User Journey Flow
Synchronize Navigation State - Ensure user journey context properly reflects current user state
Add Proper Loading States - Prevent UI flickering during data transitions
Implement Error Boundaries - Gracefully handle component errors
Specific Implementation Requirements:
Backend Changes:

Fix user profile update endpoint to handle email uniqueness constraints
Improve error handling and response messages
Add proper validation for career goal and role mapping
Frontend Changes:

Fix React context re-rendering issues
Improve error handling in profile forms
Add proper loading states for all data fetching
Synchronize career goal and target role data display
Database:

Ensure data consistency between career goals and target roles
Add proper constraints and validation
Testing Requirements:

Test profile update functionality with existing and new emails
Verify career goal and target role consistency
Test navigation flow between different app sections
Verify performance improvements and eliminate re-render loops
Success Criteria:
✅ Users can successfully update their profile information
✅ Career goals and target roles display consistently
✅ No infinite re-rendering or performance issues
✅ Smooth navigation flow between app sections
✅ Proper error handling and user feedback
✅ All user journey steps work seamlessly

Technical Focus Areas:

Database constraint handling
React context optimization
API response caching
Component lifecycle management
Error boundary implementation
User experience consistency